use ::tetron::log;
use tetron::config;
use tetron::{game::{drawable, physics, physics::vec2, transform, shape}, input};

const BALL_RADIUS = 5.0;
const PADDLE_W = 80.0;
const PADDLE_H = 10.0;
const BRICK_W = 60.0;
const BRICK_H = 20.0;
const WALL_COLOR = "#333";
const BRICK_COLOR = "#ff6600";

fn Ball(scene, x, y) {
    let ball = scene.spawn();
    ball.attach(shape::create("circle", #{ r: BALL_RADIUS }));
    ball.attach(physics::create(#{ collision: "simulate", mass: 1.0 }));
    ball.attach(transform::create(#{ pos: vec2(x, y) }));
    ball.attach(drawable::create(#{ color: "#ffffff" }));
    ball.tag("ball");
}

fn Wall(scene, x, y, w, h) {
    let wall = scene.spawn();
    wall.attach(shape::create("rect", #{ w, h }));
    wall.attach(drawable::create(#{ color: WALL_COLOR }));
    wall.attach(physics::create(#{ collision: "immovable" }));
    wall.attach(transform::create(#{ pos: vec2(x, y) }));
}

fn Brick(scene, x, y) {
    let brick = scene.spawn();
    brick.attach(shape::create("rect", #{ w: BRICK_W, h: BRICK_H }));
    brick.attach(drawable::create(#{ color: BRICK_COLOR }));
    brick.attach(physics::create(#{ collision: "immovable" }));
    brick.attach(transform::create(#{ pos: vec2(x, y) }));
}

fn out_of_bounds_system(ctx) {
    for ball in ctx.query(#{ tag: ["ball"] }) {
        let pos = ball.behaviour("tetron:physics").pos;
        if (pos.y >= 480) {
            ctx.world.load_scene("game_over");
        }
    }
}

fn paddle_input_system(ctx) {
    for ent in ctx.query(#{ tag: ["paddle"] }) {
        let b = ent.behaviour("tetron:physics");
        if (input::is_down("Right")) {
            physics::apply_force(b, vec2(1, 0));
        } else if (input::is_down("Left")) {
            physics::apply_force(b, vec2(-1, 0));
        } else {
            b.vel.x = 0;
        }
    }
}

fn Paddle(scene, x, y) {
    let paddle = scene.spawn();
    paddle.tag("paddle");
    paddle.attach(shape::create("rect", #{ w: PADDLE_W, h: PADDLE_H }));
    paddle.attach(drawable::create(#{ color: "#007cdf" }));
    paddle.attach(physics::create(#{ friction: 0.8, collision: "immovable" }));
    paddle.attach(transform::create(#{ pos: vec2(x, y) }));
}

fn setup_game_scene(world) {
    let scene = world.scene("game", #{ bg: "#120321", gravity: vec2(0.0, 0.0) });
    Paddle(scene, 320.0, 460.0);
    Ball(scene, 320.0, 240.0);
    Wall(scene, 0.0, 0.0, 640.0, 10.0);
    Wall(scene, 0.0, 0.0, 10.0, 480.0);
    Wall(scene, 630.0, 0.0, 10.0, 480.0);
    for row in 0..5 {
        for col in 0..10 {
            let x = 20.0 + col as f64 * (BRICK_W + 2.0);
            let y = 40.0 + row as f64 * (BRICK_H + 2.0);
            Brick(scene, x, y);
        }
    }
    scene.system("input", paddle_input_system);
    scene.system("out-of-bounds", out_of_bounds_system);
}

fn menu_input_system(ctx) {
    if (input::just_released("Space")) {
        log::info!("space release detected");
        ctx.world.load_scene("game");
    }
}

fn setup_menu_scene(world) {
    let scene = world.scene("menu", #{ bg: "#000000" });
    let label = scene.spawn();
    label.attach(
        drawable::create(#{ text: "Press SPACE to Start", font: #{ size: 24.0 }, color: "#ffffff" }),
    );
    label.attach(transform::create(#{ pos: vec2(240.0, 200.0) }));
    scene.system("update", menu_input_system);
}

fn game_over_input_system(ctx) {
    if (input::just_released("R")) {
        ctx.world.load_scene("game");
    }
}

fn game_over_scene(world) {
    let scene = world.scene("game_over", #{ bg: "#120321" });

    let label = scene.spawn();
    label.attach(transform::create(#{ pos: vec2(240.0, 200.0) }));
    label.attach(drawable::create(#{ text: "Game Over", font: #{ size: 32.0 }, color: "#ff0000" }));

    let prompt = scene.spawn();
    prompt.attach(drawable::create(#{ text: "Press R to Restart", font: #{ size: 20.0 }, color: "#ffffff" }));
    prompt.attach(transform::create(#{ pos: vec2(230.0, 260.0) }));

    scene.system("update", game_over_input_system);
}

pub fn begin(world) {
    if let Some(identifier) = config::get(["identifier"]) {
        log::info!(`Running example ${identifier}`);
    }

    setup_game_scene(world);
    setup_menu_scene(world);
    game_over_scene(world);

    world.load_scene("menu");
}
